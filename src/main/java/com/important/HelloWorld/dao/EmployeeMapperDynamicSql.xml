<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.important.HelloWorld.dao.EmployeeMapperDynamicSql">
	<!-- 测试动态sql -->

	<!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf" resultType="com.important.HelloWorld.bean.Employee">
		select * from tbl_employee <!-- where 1 = 1 -->
		<!-- 
			test：判断表达式，从参数中取值进行判断
			&amp;&amp; == &&
			&quot;&quot; == ""
		-->
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="lastName!=null and lastName!=&quot;&quot;">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				and email=#{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断 "0"==0 -->
			<if test="gender==0 or gender==1">
				and gender=#{gender}
			</if>
		</where>
	</select>


	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim" resultType="com.important.HelloWorld.bean.Employee">
		select * from tbl_employee
		<!-- 后面多出的and或者or where标签不能解决 
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀 
	 	prefixOverrides="":
	 			前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀
	 			suffix给拼串后的整个字符串加一个后缀
	 	suffixOverrides=""
	 			后缀覆盖：去掉整个字符串后面多余的字符
	 	-->
		<trim prefix="where" suffixOverrides="and">
			<if test="id!=null">
		 		id=#{id} and
		 	</if>
		 	<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
		 		last_name like #{lastName} and
		 	</if>
		 	<if test="email!=null and email.trim()!=&quot;&quot;">
		 		email=#{email} and
		 	</if> 
		 	<if test="gender==0 or gender==1">
		 	 	gender=#{gender}
		 	</if>
		</trim>
	</select>
	
	
	<!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	<select id="getEmpsByConditionChoose" resultType="com.important.HelloWorld.bean.Employee">
		select * from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
	 				id=#{id}
	 			</when>
	 			<when test="lastName!=null">
	 				last_name like #{lastName}
	 			</when>
	 			<when test="email!=null">
	 				email = #{email}
	 			</when>
	 			<otherwise>
	 				
	 			</otherwise>
			</choose>
		</where>
	</select>
	
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		update tbl_employee
		<!-- set：可以处理， -->
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</set>
		where id = #{id}
	</update>
	
	<!-- 
		public List<Employee> getEmpsByConditionForeach(List<Integer> ids);
		select * from tbl_employee where id in (1,2,3)
	 -->
	<select id="getEmpsByConditionForeach" resultType="com.important.HelloWorld.bean.Employee">
		select * from tbl_employee 
		<!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值
	 		
	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	 -->
	 	 <foreach collection="ids" item="item_id" separator=","
	 	 	open="where id in (" close=")">
	 	 	#{item_id}
	 	 </foreach>
	</select>
	
	<!-- mysql批量插入 -->
	<!-- 
		public void addEmps(@Param("emps") List<Employee> emps); 
		MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法
	-->
	<insert id="addEmps">
		insert into tbl_employee(
			<include refid="insertColumn"></include>
		) values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>
	<!-- 
		这种方式需要数据库连接属性allowMultiQueries=true；
		这种分号分隔多个sql可以用于其他的批量操作（删除，修改）
	 -->
	<!--<insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
			insert into tbl_employee(last_name,email,gender,d_id) values
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>-->
	
	
	<!-- Oracle数据库批量保存： 
	 	Oracle不支持values(),(),()
	 	Oracle支持的批量方式：
	 		1、多个insert放在begin - end里面
	 		begin
			    insert into employees(employee_id,last_name,email) 
			    values(employees_seq.nextval,'test_001','test_001@atguigu.com');
			    insert into employees(employee_id,last_name,email) 
			    values(employees_seq.nextval,'test_002','test_002@atguigu.com');
			end;
			2、利用中间表：
			insert into employees(employee_id,last_name,email)
		       select employees_seq.nextval,lastName,email from(
		              select 'test_a_01' lastName,'test_a_e01' email from dual
		              union
		              select 'test_a_02' lastName,'test_a_e02' email from dual
		              union
		              select 'test_a_03' lastName,'test_a_e03' email from dual
		       )
	 -->
	
	
	<!-- 两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数
	 		多个参数：参数会被封装为一个map；_parameter就是代表这个map
	 	
	 	_databaseId:如果配置了databaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle
	  -->
	<!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	<select id="getEmpsTestInnerParameter" resultType="com.important.HelloWorld.bean.Employee">
		<bind name="_lastName" value="'%'+lastName+'%'"/>
		<if test="_databaseId == 'mysql'">
			select * from tbl_employee 
			<if test="_parameter != null">
				where last_name = #{lastName}
			</if>
		</if>
		<if test="_databaseId == 'oracle'">
			select * from employees
			<if test="_parameter != null">
				where last_name like #{_lastName}
			</if>
		</if>
	</select>
	
	
	<!-- 
		1.抽取可重用的sql片段
		2.include来引用已经抽取的sql：
		3.include还可以自定义一些property，sql标签内部就能使用自定义的属性
	  			include-property：取值的正确方式${prop},
	  			#{不能使用这种方式}
	-->
	<sql id="insertColumn">
		last_name,email,gender,d_id
	</sql>
</mapper>