<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.important.HelloWorld.dao.EmployeeMapperPlus">
	
	<!-- 
		type：自定义规则的Java类型
		id：唯一id
	 -->
	<resultMap type="com.important.HelloWorld.bean.Employee" id="MyEmp">
		<!-- 
			指定主键列的封装规则 
			id定义主键mybatis底层会有优化
			column：指定哪一列
			property：指定对应的javaBean属性
		-->
		<id column="id" property="id"/>
		<!-- 定义普通列封装规则 -->
		<result column="last_name" property="lastName"/>
		<!-- 其他不指定的列会自动封装，一般只要写resultMap就把全部的映射规则都写上 -->
	</resultMap>
	<!-- 
		resultMap：自定义结果集映射规则
		public Employee getEmpById(Integer id);
	-->
	<select id="getEmpById" resultMap="MyEmp">
		select * from tbl_employee where id = #{id}
	</select>
	
	
	<!-- 
	场景一：
		查询Employee的同时查询员工对应的部门
		Employee===Department
		一个员工有与之对应的部门信息；
		id  last_name  gender    d_id     did  dept_name (private Department dept;)
	-->
	<resultMap type="com.important.HelloWorld.bean.Employee" id="MyDif">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<!-- 使用级联属性的方式 -->
		<result column="did" property="dept.id"/>
		<result column="dept_name" property="dept.departmentName"/>
	</resultMap>
	
	<resultMap type="com.important.HelloWorld.bean.Employee" id="MyDif2">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<!-- 
			association可以指定联合的javaBean对象
			property="dept"：指定哪个属性是联和的对象
			javaType：指定这个属性对象的类型【不能省略】
		-->
		<association property="dept" javaType="com.important.HelloWorld.bean.Department">
			<id column="did" property="id"/>
			<result column="dept_name" property="departmentName"/>
		</association>
	</resultMap>
	<!-- public Employee getEmpAndDept(Integer id); -->
	<select id="getEmpAndDept" resultMap="MyDif2">
		SELECT e.id id, e.last_name, e.gender, d.id did, d.dept_name dept_name 
		FROM tbl_employee e, tbl_dept d WHERE e.d_id = d.id AND e.id = #{id};
	</select>
	
	
	<!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
	<resultMap type="com.important.HelloWorld.bean.Employee" id="MyEmpByStep">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!-- 
			association定义关联对象的封装规则
			select：表明当前属性是调用select指定的方法查出的结果
			column：指定将哪一列的值传给这个方法
		-->
		<association property="dept" 
			select="com.important.HelloWorld.dao.DepartmentMapper.getDeptById"
			column="d_id">
		</association>
	</resultMap>
	<select id="getEmpByIdStep" resultMap="MyEmpByStep">
		select * from tbl_employee where id = #{id}
	</select>
	<!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		我们每次查询Employee对象的时候，都将一起查询出来。
	 		部门信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：
	 	<setting name="lazyLoadingEnabled" value="true"/>
		<setting name="aggressiveLazyLoading" value="false"/>
	-->


	<!-- 场景二： 查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中 -->
	<!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
	<select id="getEmpsByDeptId" resultType="com.important.HelloWorld.bean.Employee">
		select * from tbl_employee where d_id = #{deptId}
	</select>
	
	
	<!-- =======================鉴别器============================ -->
	<!-- <discriminator javaType=""></discriminator>
		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出的是女生：就把部门信息查询出来，否则不查询；
			如果是男生，把last_name这一列的值赋值给email;
	-->
	
	
</mapper>